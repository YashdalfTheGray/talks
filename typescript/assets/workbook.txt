[1, 2, 3, 4, 5]
.map(v => v * 2)
.reduce((acc, a) => acc + a, 0);

function doubleThenAdd(
    numbers: number[]
): number {
    return numbers
    .map(v => v * 2)
    .reduce((acc, a) => acc + a, 0);
}

function addListener(
    event: string, l: (data: any) => void
): () => void {
    events.addEventListener(event, l);
    return () => 
        events.removeListener(event, l);
}


type Listener = (data: any) => void;
type DeregisterFunction = () => void;

function addListener(
    event: string, l: Listener
): DeregisterFunction {
    events.addEventListener(event, l);
    return () => 
        events.removeListener(event, l);
}


interface PortMapping {
    hostPort?: number;
    containerPort: number;
    protocol: string;
}

function validatePortMappings(
    portMaps: PortMapping[]
): boolean { }

type Listener<T> = (data: T) => void;

function addListener(
    event: string,
    l: Listener<string>
): DeregisterFunction {
    events.addEventListener(event, l);
    return () => 
        events.removeListener(event, l);
}

const enum Directions {
    Up = "UP",
    Down = "DOWN",
    Left = "LEFT",
    Right = "RIGHT"
};